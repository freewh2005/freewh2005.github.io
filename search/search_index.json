{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"home/","title":"Blog Construction","text":""},{"location":"OI/flow/","title":"\u7f51\u7edc\u6d41\u6a21\u578b\u4e0e\u5e94\u7528","text":""},{"location":"OI/flow/#_1","title":"\u524d\u8a00\uff1a","text":"<p>\u7531\u4e8e\u7f51\u7edc\u6d41\u7684\u5efa\u6a21\u6bd4\u8f83\u591a\u6837\uff0c\u6240\u4ee5\u60f3\u5c06\u6700\u8fd1\u8bad\u7ec3\u5230\u7684\u5e38\u89c1\u7f51\u7edc\u6d41\u5efa\u6a21\u8bb0\u5f55\u4e0b\uff0c\u4ee5\u6b64\u5de9\u56fa\u6240\u5b66\u3002</p>"},{"location":"OI/flow/#cf720b-cactusophobia","title":"CF720B Cactusophobia","text":"<p>\u7ed9\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u4ed9\u4eba\u638c\uff08\u65e0\u5411\u8054\u901a\u56fe\u7684\u4e00\u79cd\uff0c\u6bcf\u6761\u8fb9\u6700\u591a\u5c5e\u4e8e\u4e00\u4e2a\u73af\uff09\uff0c\u8fb9\u4e0a\u6709\u989c\u8272\uff0c\u8ba9\u4f60\u6c42\u51fa\u628a\u8fd9\u68f5\u4ed9\u4eba\u638c\u5220\u8fb9\u6210\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\u540e\u5269\u4f59\u989c\u8272\u79cd\u7c7b\u6700\u591a\u65f6\u7684\u989c\u8272\u79cd\u7c7b\u6570\u3002</p> <p>\u89e3\u6790\uff1a\u4e0d\u96be\u53d1\u73b0\u8981\u5220\u6210\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6bcf\u4e2a\u73af\u5404\u81ea\u5220\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97\u5269\u4f59\u989c\u8272\u6570\u6700\u5927\u3002</p> <p>\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u8d85\u7ea7\u6e90\u5411\u5b83\u4eec\u8fde\u8fb9\u5e76\u6709\u4e00\u4e2a\u7684\u6d41\u91cf\u3002\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u770b\u4f5c\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u70b9\u53cc\u5185\u6240\u62e5\u6709\u7684\u989c\u8272\u5bf9\u5e94\u7684\u8282\u70b9\u90fd\u5411\u5176\u8fde\u8fb9\u3002</p> <p>\u4e3a\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53cc\u90fd\u53ea\u80fd\u62e5\u6709\u5176 \u70b9\u6570\u51cf\u4e00 \u6761\u8fb9\uff0c\u5373 $siz-1$ \uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53cc\u5bf9\u5e94\u7684\u8282\u70b9\u8fde\u5411\u8d85\u7ea7\u6c47\u7684\u8fb9\u6240\u62e5\u6709\u7684\u5bb9\u91cf\u53ea\u80fd\u4e3a $siz-1$\u3002</p> <p>\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5373\u53ef\uff0c\u56e0\u4e3a\u8981\u6c42\u989c\u8272\u79cd\u7c7b\u6700\u591a\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e5+9;\nint n,m,head[N],tot;\nstruct pp{int nxt,to,c;}g[N];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].c=w,head[u]=tot;\n}\nvector&lt;int &gt;dcc[N];\nint cnt,low[N],dfn[N],num,s[N],top,siz[N];\nvoid tarjan(int u){\n    dfn[u]=low[u]=++num,s[++top]=u;int flag=0;\n    for(int i=head[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[v],low[u]);\n            if(low[v]&gt;=dfn[u]){\n                ++cnt;siz[cnt]=1;\n                do{\n                    dcc[cnt].push_back(s[top]);siz[cnt]++;\n                }while(s[top--]!=v);\n                dcc[cnt].push_back(u);\n            }\n        }\n        else low[u]=min(low[u],dfn[v]);\n    }\n}\nint hd[N],cur[N];\nstruct Edge{int nxt,to,val;}G[N];\nvoid Add(int u,int v,int w){\n    G[++tot].nxt=hd[u],G[tot].to=v,G[tot].val=w,hd[u]=tot;\n}\nvoid inAdd(int u,int v,int w){Add(u,v,w);Add(v,u,0);return ;}\nint vis[N],S,T;\nvoid dfs(int u,int fa,int id){\n    vis[u]=2;\n    for(int i=head[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;if(v==fa) continue;\n        if(vis[v]){\n            inAdd(g[i].c,id+m,1);\n            if(vis[v]==1) dfs(v,u,id);\n        }\n    }\n}\nint dep[N];\nint bfs(){\n    for(int i=0;i&lt;=T;i++) dep[i]=0;\n    queue&lt;int&gt;q;dep[S]=1;q.push(S); \n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=hd[u];i!=-1;i=G[i].nxt){\n            int v=G[i].to;\n            if(G[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int ct=0;\n    for(int &amp;i=cur[u];i!=-1;i=G[i].nxt){\n        int v=G[i].to;\n        if(G[i].val&amp;&amp;dep[v]==dep[u]+1){\n            int res=Dinic(v,min(flow,G[i].val));\n            G[i].val-=res,G[i^1].val+=res;\n            ct+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!ct) dep[u]=0;\n    return ct;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=0;i&lt;=T;i++) cur[i]=hd[i];\n        ans+=Dinic(S,1e9);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=0;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for(int i=1;i&lt;=m;i++){\n        int u,v,w;scanf(\"%d%d%d\",&amp;u,&amp;v,&amp;w);add(u,v,w);add(v,u,w);\n    }\n    top=0,cnt=0,num=0;\n    tarjan(1);tot=-1;\n    memset(hd,-1,sizeof(hd));\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i&lt;=cnt;i++){\n        for(int j=0;j&lt;dcc[i].size();j++) vis[dcc[i][j]]=1;\n        dfs(dcc[i][0],0,i);\n        for(int j=0;j&lt;dcc[i].size();j++) vis[dcc[i][j]]=0;\n    }\n    S=0,T=m+cnt+1;\n    for(int i=1;i&lt;=m;i++) inAdd(S,i,1);\n    for(int i=1;i&lt;=cnt;i++) inAdd(m+i,T,siz[i]-1);\n    printf(\"%d\\n\",mxflow());\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#noi2006","title":"[NOI2006]\u6700\u5927\u83b7\u5229","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u6d89\u53ca\u5efa\u6a21\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe</p> <p>\u8fd9\u662f\u6700\u5c0f\u5272\u7684\u5178\u578b\u5e94\u7528\u3002\u5148\u8bb2\u4e0b\u95ed\u5408\u56fe\u7684\u5b9a\u4e49\uff0c\u4e00\u4e2a\u6709\u5411\u56fe\u662f\u95ed\u5408\u56fe\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u5c5e\u4e8e\u95ed\u5408\u56fe\u7684\u70b9 \u6240\u6709\u540e\u7ee7\u90fd\u5728\u95ed\u5408\u56fe\u5185\u3002</p> <p>\u5bf9\u5e94\u7684\u903b\u8f91\u5173\u7cfb\u5c31\u662f\u82e5\u95ed\u5408\u56fe\u4e0a\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u540e\u7ee7\u90fd\u5fc5\u987b\u88ab\u9009\u62e9\u3002</p> <p>\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5c31\u662f\u4ece\u539f\u56fe\u4e2d\u9009\u51fa\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\uff0c\u4f7f\u5f97\u5b50\u56fe\u5185\u70b9\u6743\u4e4b\u548c\u6700\u5927\u3002\uff08\u70b9\u6743\u53ef\u6b63\u53ef\u8d1f\uff09</p> <p>\u5728\u672c\u9898\u4e2d\uff0c\u5c06\u6bcf\u4e2a\u7fa4\u4f53\u7528\u6237\u548c\u57fa\u7ad9\u90fd\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u7fa4\u4f53\u7528\u6237 $i$ \u7684\u70b9\u6743\u4e3a $C_i$\uff0c\u57fa\u7ad9 $j$ \u70b9\u6743\u4e3a $-P_j$\u3002</p> <p>\u7ed9\u51fa\u7684\u5173\u7cfb\u53ef\u4ee5\u770b\u505a\u7528\u6237\u7fa4\u4f53 $i$ \u5411\u57fa\u7ad9 $a_i$ \u548c $b_i$ \u8fde\u8fb9\uff0c\u800c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002</p> <p>\u5bf9\u4e8e\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6c42\u89e3\u5176\u5b9e\u662f\u4e2a\u5957\u8def\uff0c\u4e5f\u662f\u6700\u5c0f\u5272\u7684\u5178\u578b\u5e94\u7528\u3002</p> <p>\u5176\u5efa\u56fe\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <p>\u6784\u9020\u4e00\u4e2a\u6e90\u70b9S\uff0c\u6c47\u70b9T\u3002\u6211\u4eec\u5c06S\u4e0e\u6240\u6709\u6743\u503c\u4e3a\u6b63\u7684\u70b9\uff08\u5373\u76c8\u5229\uff09\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5176\u6743\u503c\u7684\u8fb9\uff0c\u5c06\u6240\u6709\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\uff08\u5373\u4ee3\u4ef7\uff09\u4e0eT\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5176\u6743\u503c\u7684\u7edd\u5bf9\u503c\u7684\u8fb9\uff0c\u539f\u6765\u7684\u8fb9\u5c06\u5176\u5bb9\u91cf\u5b9a\u4e3a\u6b63\u65e0\u7a77\u3002</p> <p>\u53ef\u4ee5\u8bc1\u660e\uff0c\u4e00\u6761\u7b80\u5355\u5272\u5212\u5206\u5c06\u539f\u56fe\u5212\u5206\u4e3a\u4e0e S \u8054\u901a\u548c\u4e0e T \u8054\u901a\u7684\u4e24\u4e2a\u5b50\u56fe\uff0c\u4e0e S \u8054\u901a\u7684\u5b50\u56fe\u9664\u53bb S \u5c31\u662f\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002</p> <p>\u5f53\u7b80\u5355\u5272\u4e3a\u6700\u5c0f\u5272\u65f6\uff0c\u4e0e S \u8054\u901a\u7684\u95ed\u5408\u5b50\u56fe\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002</p> <p>\u5bf9\u4e8e\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u5c31\u662f\uff1a</p> <p>\u5982\u679c\u5272\u6389\u7528\u6237\u7684\u8fb9\uff0c\u90a3\u4e48\u5c31\u820d\u5f03\u6389\u4e00\u90e8\u5206\u6536\u76ca\uff0c\u53ef\u4ee5\u770b\u505a\u635f\u5931\u3002</p> <p>\u5982\u679c\u5272\u6389\u4e2d\u8f6c\u7ad9\u7684\u8fb9\uff0c\u90a3\u4e48\u5c31\u4ed8\u51fa\u4e00\u5b9a\u4ee3\u4ef7\uff0c\u53ef\u4ee5\u770b\u505a\u635f\u5931\u3002</p> <p>\u6700\u540e\u7528\u603b\u6536\u76ca( $\\sum{C_i}$ )\u51cf\u53bb\u6700\u5c0f\u5272(\u6700\u5927\u6d41)\u5c31\u662f\u7b54\u6848</p> <p>\u81f3\u4e8e\u8bc1\u660e\uff0c\u53ef\u4ee5\u53bb\u4e0a\u9762\u90a3\u4e2a\u94fe\u63a5\u770b\u770b\uff0c\u4e5f\u53ef\u4ee5\u770b\u770b\u81ea\u5df1\u7684\u3002</p> <p>\u8bc1\u660e\uff1a\u603b\u76c8\u5229\uff08\u6743\u503c\u4e3a\u6b63\u7684\u70b9\u6743\u548c\uff09$-$ \u6700\u5c0f\u5272\u7684\u5bb9\u91cf $=$ \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002</p> <p>\u9996\u5148\uff0c\u6613\u77e5\u4e0e $S$ \u8054\u901a\u7684\u5b50\u56fe\u9664\u53bb $S$ \u5373\u4e3a\u95ed\u5408\u5b50\u56fe\uff0c\u5e76\u4e14\u6700\u5c0f\u5272\u4e00\u5b9a\u662f\u7b80\u5355\u5272\uff0c\u6211\u4eec\u8981\u8bc1\u7684\u662f\u5f53\u5272\u4e3a\u6700\u5c0f\u5272\u662f\uff0c\u8be5\u95ed\u5408\u5b50\u56fe\u6743\u6700\u5927\u3002</p> <p>\u4e0d\u59a8\u4ee4\u4e0e $S$ \u8054\u901a\u7684\u5b50\u56fe\u4e3a $M$ \uff0c\u4e0e $T$ \u8054\u901a\u7684\u5b50\u56fe\u4e3a $N$ \u3002</p> <p>$M$ \u7684\u6743\u503c\u548c\u5c31\u662f   $M$ \u4e2d\u6743\u503c\u4e3a\u6b63\u7684\u70b9\u6743\u548c $x_1$   \u52a0\u4e0a  $M$ \u4e2d\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u6743\u548c\u3002 \u4e3a\u65b9\u4fbf\uff0c\u8bb0 $M$ \u4e2d\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u6743\u548c\u7684\u7edd\u5bf9\u503c\u4e3a $y_1$,\u5219 $M$ \u7684\u6743\u503c\u548c $W = x_1 - y_1$</p> <p>\u6b64\u65f6\u56fe\u4e2d\u7b80\u5355\u5272\u7684\u5bb9\u91cf $C$ \u4e3a $N$ \u4e2d\u6743\u503c\u4e3a\u6b63\u7684\u70b9\u6743\u548c $x_2$  \u52a0\u4e0a $M$ \u4e2d\u70b9\u6743\u4e3a\u8d1f\u7684\u70b9\u6743\u548c\u7684\u7edd\u5bf9\u503c $y_1$\uff0c\u5373 $C = x_2 + y_1$</p> <p>\u90a3\u4e48 $W+C = x_1+x_2  =  sum$ \uff0c$sum$ \u8868\u793a\u76c8\u5229\u4e4b\u548c\u3002</p> <p>\u6240\u4ee5 $W = sum - C$ \uff0c\u5f53 $C$ \u53d6\u5230\u6700\u5c0f\uff08\u5373\u6700\u5c0f\u5272\u65f6\uff09\uff0c $W$ \u4e3a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u3002</p> <p>\u53ef\u53c2\u8003\u300a\u6700\u5c0f\u5272\u6a21\u578b\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528\u300b</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 2e5+9;\nconst int inf = 1e9;\nint n,m,p[N],head[N],tot,cur[N];\nstruct pp{int nxt,to,val;}g[N&lt;&lt;1];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid inadd(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint S,T,dep[N];\nint bfs(){\n    for(int i=0;i&lt;=T;i++) dep[i]=0;\n    queue&lt;int&gt;q;while(!q.empty()) q.pop();\n    q.push(S);dep[S]=1;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(g[i].val&amp;&amp;dep[v]==dep[u]+1){\n            int res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            flow-=res,cnt+=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=0;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=n+m+1;\n    for(int i=1;i&lt;=n;i++){scanf(\"%d\",&amp;p[i]);inadd(m+i,T,p[i]);}\n    int sum=0;\n    for(int i=1;i&lt;=m;i++){\n        int a,b,c;scanf(\"%d%d%d\",&amp;a,&amp;b,&amp;c);sum+=c;\n        inadd(i,m+a,inf);inadd(i,m+b,inf);inadd(S,i,c);\n    }\n    printf(\"%d\\n\",sum-mxflow());    \n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#tjoi2011","title":"[TJOI2011]\u5361\u7247","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u9898\u610f\u6709\u95ee\u9898\uff0c\u770b\u4e86\u534a\u5929\uff0c\u624d\u53d1\u73b0\u6c42\u7684\u662f\u80fd\u5339\u914d\u7684\u7ec4\u6570\u3002</p> <p>\u8003\u8651\u5982\u679c\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\u53ef\u80fd\u5230\u8fbe $n^2$ \u7ea7\u522b\u7684\u8fb9\u6570\uff0c\u6240\u4ee5\u9762\u4e34\u8d85\u65f6\u7684\u5371\u9669\u3002\u89e3\u51b3\u65b9\u6848\u4e5f\u4e0d\u96be\uff0c\u53ea\u8981\u901a\u8fc7\u5171\u6709\u7684\u8d28\u6570\u6765\u7b80\u5316\u5efa\u8fb9\u7b56\u7565\u5373\u53ef\u3002</p> <p>\u6211\u4eec\u5bf9\u7ea2\u8272\u5361\u4e0a\u7684\u6570\u5411\u5b83\u6240\u542b\u6709\u7684\u6240\u6709\u8d28\u6570\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5bf9\u6240\u6709\u84dd\u8272\u5361\u4e0a\u7684\u6570\u4ece\u5b83\u6240\u542b\u6709\u7684\u6240\u6709\u8d28\u6570\u5904\u8fde\u51fa\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u518d\u5206\u522b\u8fde\u4e0a\u8d85\u7ea7\u6e90\u548c\u8d85\u7ea7\u6c47\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5373\u53ef\u3002</p> <p>\u6ce8\u610f\uff1a\u8fd9\u6837\u7684\u5efa\u8fb9\u662f\u5c06\u539f\u6765\u4ece\u4e24\u4e2a\u96c6\u5408\u5185\u5206\u522b\u679a\u4e3e\u9020\u6210 $n^2$ \u7684\u8fb9\u6570\u4f18\u5316\u5230 $n\\log n$ \u7ea7\u522b\u7684\u8fb9\u6570\uff0c\u56e0\u4e3a\u4e00\u4e2a\u6570\u6240\u542b\u6709\u7684\u8d28\u56e0\u5b50\u6700\u591a $\\log$ \u4e2a\u3002\u8fd9\u6837\u4f18\u5316\u5efa\u56fe\u7684\u65b9\u5f0f\u4e5f\u5f88\u5e38\u89c1\uff0c\u901a\u8fc7\u65b0\u5efa\uff08\u4e0e\u4e24\u8005\u90fd\u6709\u5173\u7cfb\u7684\uff09\u8282\u70b9\u6765\u7b80\u5316\u8fb9\u6570\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 509;\nconst int M = 3e3+9;\nint T,n,m,a[N],b[N];\nint cnt,head[M],tot,cur[M],dep[M];\nmap&lt;int ,int &gt;mp;\nint New(int x){if(mp[x]) return mp[x];mp[x]=++cnt;return cnt;}\nint s,t;\nstruct pp{int nxt,to,val;}g[M*10];\nvoid add(int u,int v,int w){g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;}\nvoid inadd(int u,int v,int w){add(u,v,w);add(v,u,0);}\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[s]=1;\n    queue&lt;int &gt;q;while(!q.empty()) q.pop();\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    } \n    return dep[t];\n}\nint Dinic(int u,int flow){\n    if(u==t) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(dep[v]==dep[u]+1&amp;&amp;g[i].val){\n            int res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=0;i&lt;=t;i++) cur[i]=head[i];\n        ans+=Dinic(s,1e9);\n    }\n    return ans;\n}\n\nint main(){\n    scanf(\"%d\",&amp;T);\n    while(T--){\n        memset(head,-1,sizeof(head));tot=-1;\n        cnt=0;mp.clear();\n        scanf(\"%d%d\",&amp;n,&amp;m);\n        for(int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]);\n        for(int i=1;i&lt;=m;i++) scanf(\"%d\",&amp;b[i]);\n        cnt=n;\n        for(int i=1;i&lt;=n;i++){\n            for(int j=2;j*j&lt;=a[i];j++)\n                if(!(a[i]%j)){\n                    inadd(i,New(j),1);\n                    while(!(a[i]%j)) a[i]/=j;\n                    if(a[i]==1) break;\n                }\n            if(a[i]!=1) inadd(i,New(a[i]),1);\n        }\n        for(int i=1;i&lt;=m;i++){\n            for(int j=2;j*j&lt;=b[i];j++)\n                if(!(b[i]%j)){\n                    if(mp[j]) inadd(mp[j],cnt+i,1);\n                    while(!(b[i]%j)) b[i]/=j;\n                    if(b[i]==1) break;\n                }\n            if(b[i]!=1&amp;&amp;mp[b[i]]) inadd(mp[b[i]],cnt+i,1); \n        }\n        s=0,t=cnt+m+1;\n        for(int i=1;i&lt;=n;i++) inadd(s,i,1);\n        for(int i=1;i&lt;=m;i++) inadd(cnt+i,t,1);\n        printf(\"%d\\n\",mxflow());\n    }\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#sdoi2014lis","title":"[SDOI2014]LIS","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u9996\u5148\u660e\u786e\u6211\u4eec\u7b2c\u4e00\u5c0f\u95ee\u8981\u505a\u7684\u662f\u5220\u53bb\u4e00\u4e9b\u6570\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728\u548c\u539f\u6765\u76f8\u540c\u957f\u5ea6\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3002</p> <p>\u6709\u4e00\u4e2a\u5f88 naive \u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u5c06\u80fd\u5728\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e0a\u7684\u6570\u4e0e\u5b83\u7684\u540e\u7ee7\u8fde\u8fb9\uff0c\u5efa\u7acb\u8d85\u7ea7\u6e90\u5411\u6240\u6709\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u5f00\u5934\u8fde\u8fb9\uff0c\u6240\u6709\u6700\u957f\u5347\u4e0a\u5b50\u5e8f\u5217\u7684\u7ed3\u5c3e\u5411\u8d85\u7ea7\u6c47\u8fde\u8fb9\u3002\u90a3\u6211\u4eec\u5c31\u662f\u6c42\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u662f\u6e90\u548c\u6c47\u4e0d\u8fde\u901a\uff0c\u5373\u6700\u5c0f\u5272\u3002</p> <p>\u53ef\u4f60\u53d1\u73b0\uff0c\u8fd9\u79cd\u505a\u6cd5\u5728\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u6211\u4eec\u65e0\u6cd5\u7ed9\u6bcf\u6761\u8fb9\u786e\u5b9a\u6743\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5220\u6389\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5177\u4f53\u8be5\u5220\u54ea\u4e2a\u6570\u3002\u8fd9\u5c31\u4f7f\u5f97\u6211\u4eec\u8be5\u4f7f\u7528\u62c6\u70b9\u7684\u6280\u5de7\u3002</p> <p>\u5947\u6280\u6deb\u5de7\u4e4b\u62c6\u70b9\uff1a\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e00\u4e2a\u8fdb\uff0c\u4e00\u4e2a\u51fa\uff0c\u8fd9\u4e24\u4e2a\u70b9\u8fde\u8fb9\u8fb9\u6743\u4e3a\u5220\u9664\u8fd9\u4e2a\u70b9\u7684\u4ee3\u4ef7\uff0c\u5176\u4f59\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e3a inf \uff0c\u8fd9\u5c31\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u63a5\u4e0b\u6765\u6c42\u6700\u5c0f\u5272\u5373\u53ef\u3002</p> <p>\u8fd9\u8fd8\u6ca1\u5b8c\u5462\uff01\u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\uff01</p> <p>\u5b57\u5178\u5e8f\u6700\u5c0f\u6307\u7684\u662f $C$ \u503c\u5c0f\u7684\u8d8a\u524d\u9762\u8d8a\u597d\uff0c\u4e0e\u5e8f\u5217\u957f\u5ea6\u65e0\u5173\u3002</p> <p>\u4e0b\u9762\u5148\u4ecb\u7ecd\u5982\u4f55\u8f93\u51fa\u65b9\u6848\u3002</p> <p>\u9996\u5148\u5f15\u5165\u6700\u5c0f\u5272\u7684\u53ef\u884c\u8fb9\u548c\u5fc5\u987b\u8fb9\u3002</p> <p>\u201c\u4e00\u6761\u8fb9\u662f\u6700\u5c0f\u5272\u7684\u53ef\u884c\u8fb9\uff0c\u5c31\u8868\u660e\u8fd9\u6761\u8fb9\u5b58\u5728\u4e8e\u67d0\u4e00\u79cd\u6700\u5c0f\u5272\u4e2d\u3002\u201d</p> <p>\u5982\u4f55\u5224\u5b9a$(u,v)$\u662f\u5426\u662f\u53ef\u884c\u8fb9\uff1a</p> <ol> <li> <p>$(u,v)$ \u5fc5\u987b\u6ee1\u6d41\u3002\uff08\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\u6570\u503c\u4e0a\uff0c\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41\uff0c\u663e\u7136\u5272\u6ee1\u6d41\u7684\u8fb9\u624d\u6709\u53ef\u80fd\u662f\u6700\u5c0f\u5272\uff09</p> </li> <li> <p>\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\uff0c$u,v$ \u5728\u4e0d\u7ecf\u8fc7\u53cd\u5411\u8fb9\u7684\u60c5\u51b5\u4e0b\u4e0d\u8fde\u901a\uff0c\u5373\u4e0d\u5b58\u5728\u4ece $u$ \u5230 $v$ \u7684\u589e\u5e7f\u8def\u5f84\u3002</p> </li> </ol> <p>\u6211\u4eec\u53ea\u9700\u8981\u770b\u770b\u4ece $u$ \u5230 $v$ \u80fd\u4e0d\u80fd $bfs$ \u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u5982\u679c $u$ \u5230 $v$ \u8fd8\u80fd\u589e\u5e7f\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u662f\u51b3\u5b9a\u6700\u5927\u6d41\u6d41\u91cf\u7684\u90a3\u6761\u8fb9\uff0c\u5373\u5b83\u4e0d\u53ef\u80fd\u662f\u6700\u5c0f\u5272\u4e0a\u7684\u8fb9\u3002</p> <p>\u81f3\u4e8e\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4ece $C$ \u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\u679a\u4e3e\uff0c\u7136\u540e\u8fdb\u884c\u9000\u6d41\uff0c\u5373\u64a4\u9500\u5b83\u7684\u8d21\u732e\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u6761\u8fb9\u5272\u6389\u3002\u6211\u4eec\u4e00\u76f4\u8fd9\u4e48\u505a\u76f4\u5230 $S$ \u548c $T$ \u4e0d\u8fde\u901a\u4e3a\u6b62\u3002</p> <p>\u4e0b\u9762\u76f4\u63a5\u5f15\u7528\u9898\u89e3\u4e2d\u7684\u8bdd\uff1a</p> <p>\u6240\u4ee5\u6211\u4eec\u7684\u7b54\u6848\u5c31\u4e00\u5b9a\u662f\u6700\u5c0f\u5272\u7684\u53ef\u884c\u8fb9\uff0c\u6211\u4eec\u5f00\u59cb\u6784\u9020\u8fd9\u4e2a\u6700\u5c0f\u5272\u96c6</p> <p>\u6211\u4eec\u6309\u7167\u8fb9\u7684\u6743\u503c\u6392\u5e8f\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u662f\u53ef\u884c\u8fb9\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u7b54\u6848</p> <p>\u540c\u65f6\u9009\u62e9\u4e86\u8fd9\u6761\u8fb9\u7684\u8bdd\u6211\u4eec\u5c31\u5f97\u6392\u9664\u548c\u8fd9\u6761\u8fb9\u7b49\u4ef7\u7684\u90a3\u4e9b\u8fb9\u7684\u5f71\u54cd</p> <p>\u8fd9\u6761\u8fb9\u7b49\u4ef7\u7684\u90a3\u4e9b\u8fb9\u663e\u7136\u4f1a\u5b58\u5728\u4e8e $S$ \u5230 $u$ \u548c $v$ \u5230 $T$ \u7684\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece $u$ \u5411 $S$ \uff0c$T$ \u5411 $v$ \u9000\u6d41,\u628a\u90a3\u4e9b\u6ee1\u6d41\u7684\u8fb9\u7684\u6d41\u91cf\u6e05\u6389</p> <p>\u9000\u6d41\u7684\u8bdd\u8dd1\u4e00\u904d $dinic$ \u5c31\u597d\u4e86</p> <p>\u540c\u65f6\u6ce8\u610f\u4f18\u5316\u4e00\u4e0b $dinic$ \u7684\u5e38\u6570\uff0c\u6709\u4e00\u70b9\u5361\u5e38</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\nconst int N = 709;\nconst int M = 2e5+9;\nconst ll inf = 1e15;\nint Tt,n,a[N];ll b[N];\nint dp[N],st[N],top,vis[N];\nint in[N],ot[N],S,T,head[M],tot;\nstruct pp{int nxt,to;ll val;}g[M&lt;&lt;1];\nvoid add(int u,int v,ll w){g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;}\nvoid inadd(int u,int v,ll w){add(u,v,w);add(v,u,0);return ;}\nint dep[M],cur[M];\nint bfs(int s,int t){\n    memset(dep,0,sizeof(dep));dep[s]=1;\n    queue&lt;int&gt;q;while(!q.empty()) q.pop();q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[t];\n}\nll Dinic(int u,ll flow){\n    if(u==T) return flow;\n    ll cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(dep[v]==dep[u]+1&amp;&amp;g[i].val){\n            ll res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nll mxflow(){\n    ll ans=0;\n    while(bfs(S,T)){\n        for(int i=0;i&lt;=2*n+1;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf); \n    }\n    return ans;\n}\nstruct node{ll val;int id;}c[N];\nbool cmp(node x,node y){return x.val&lt;y.val;}\nint ans[N],e;\nvoid Del(int S,int T){\n    while(bfs(S,T)){\n        for(int i=0;i&lt;=2*n+1;i++) cur[i]=head[i];\n        ll y=Dinic(S,inf);\n    }\n    return ;\n}\nint main(){\n    scanf(\"%d\",&amp;Tt);\n    while(Tt--){\n        memset(head,-1,sizeof(head));tot=-1;\n        scanf(\"%d\",&amp;n);\n        for(int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]);\n        for(int i=1;i&lt;=n;i++) scanf(\"%lld\",&amp;b[i]);\n        for(int i=1;i&lt;=n;i++){scanf(\"%lld\",&amp;c[i].val);c[i].id=i;}\n        top=0;st[0]=0;\n        for(int i=1;i&lt;=n;i++){\n            if(!top||st[top]&lt;a[i]) st[++top]=a[i],dp[i]=top;\n            else{\n                int l=1,r=top,ps=top;\n                while(l&lt;=r){\n                    int mid=(l+r)&gt;&gt;1;\n                    if(st[mid]&gt;=a[i]) r=mid-1,ps=mid;\n                    else l=mid+1;\n                }\n                st[ps]=a[i],dp[i]=ps;\n            }\n        }\n        memset(vis,0,sizeof(vis));int len=top;\n        S=0,T=2*n+1;\n        for(int i=1;i&lt;=n;i++){in[i]=2*i-1,ot[i]=2*i;inadd(in[i],ot[i],b[i]);}\n        for(int i=n;i&gt;=1;i--){\n            if(dp[i]==len) vis[i]=1;\n            if(vis[i]){\n                for(int j=1;j&lt;i;j++)\n                    if(dp[j]+1==dp[i]&amp;&amp;a[j]&lt;a[i]){\n                        vis[j]=1;\n                        inadd(ot[j],in[i],inf);\n                    }\n            }\n            if(dp[i]==len) inadd(ot[i],T,inf);\n            if(dp[i]==1) inadd(S,in[i],inf);\n        }\n        printf(\"%lld \",mxflow());e=0;\n        sort(c+1,c+n+1,cmp);\n        for(int i=1;i&lt;=n;i++){\n            int u=in[c[i].id],v=ot[c[i].id];\n            if(g[2*c[i].id-2].val==0){\n                if(!bfs(u,v)){\n                    g[2*c[i].id-2].val=0,g[2*c[i].id-1].val=0;\n                    S=u,T=0;Del(S,T);\n                    S=2*n+1,T=v;Del(S,T);\n                    ans[++e]=c[i].id;\n                }\n            }\n        }\n        printf(\"%d\\n\",e);sort(ans+1,ans+e+1);\n        for(int i=1;i&lt;=e;i++) printf(\"%d \",ans[i]);puts(\"\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#zjoi2009","title":"[ZJOI2009]\u72fc\u548c\u7f8a\u7684\u6545\u4e8b","text":"<p>\u9898\u610f\u7b80\u8ff0\uff1a</p> <p>\u6709 $n\\times m$ \u7684\u7f51\u683c\u56fe\uff0c\u6bcf\u4e2a\u683c\u5b50\u6709\u4e00\u4e2a\u503c $0/\u00bd$ \uff08\u4e09\u9009\u4e00\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u683c\u5b50\u8fb9\u7f18\u5efa\u6805\u680f\uff0c\u4e00\u5355\u4f4d\u957f\u5ea6\u4ee3\u4ef7\u4e3a $1$\uff0c\u6c42\u4f7f\u5f97 $1$\uff0c$2$\u4e0d\u518d\u8054\u901a\u7684\u65b9\u6848\u6570\u3002</p> <p>\u9898\u89e3\uff1a</p> <p>\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u5c0f\u5272\uff0c\u76f8\u90bb\u4e24\u4e2a\u683c\u5b50\u95f4\u5efa\u8fb9\u3002\u5bf9 $1$ \u548c $2$ \u7684\u70b9\u5206\u522b\u4e0e\u8d85\u7ea7\u6e90\u3001\u8d85\u7ea7\u6c47\u8fde\u8fb9\uff0c\u4e3a\u9632\u6b62\u4e0e\u8d85\u7ea7\u6e90\u6c47\u7684\u8fde\u8fb9\u4f1a\u6210\u4e3a\u6700\u5c0f\u5272\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u8fb9\u6743\u8d4b\u4e3a $inf$ \u3002\u63a5\u4e0b\u6765\u76ee\u7684\u5c31\u662f\u4f7f $S$ \uff0c $T$ \u4e0d\u8fde\u901a\uff0c\u8fd9\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e0a\u6700\u5c0f\u5272\u4e86\uff08\u8fd9\u771f\u662f\u88f8\u7684\u6700\u5c0f\u5272\u3002\u3002\uff09 </p> <p>\u6ce8\u610f $0$ \u4e0e $0$ \u7684\u683c\u5b50\u95f4\u4e5f\u9700\u8981\u8fde\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u6837\u6709\u53ef\u80fd\u4f1a\u4f7f\u7b54\u6848\u66f4\u4f18\uff08\u53cd\u6b63\u8fde\u4e0a\u8d85\u7ea7\u6e90\u6c47\u540e\u5c31\u76f4\u63a5\u6ee1\u8db3\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\u4e86\uff0c\u7559\u7ed9\u7535\u8111\u778e\u8dd1\u5427\uff0c\u53cd\u6b63\u662f\u6700\u5c0f\u5272\uff09\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e2+9;\nconst int N2 = 1e5+9;\nconst int inf = 1e9;\nint n,m,a[N][N],head[N2],tot;\nstruct pp{int nxt,to,val;}g[N2*10];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid Iadd(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint c(int x,int y){return (x-1)*m+y;}\nvoid I(int x,int y,int nx,int ny){\n    if(nx&gt;n||nx&lt;1||ny&gt;m||ny&lt;1) return ;\n    Iadd(c(x,y),c(nx,ny),1);return ;\n}\nint S,T,cur[N2],dep[N2];\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[S]=1;\n    queue&lt;int&gt;q;while(!q.empty()) q.pop();\n    q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(g[i].val&amp;&amp;dep[v]==dep[u]+1){\n            int res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++) scanf(\"%d\",&amp;a[i][j]);\n    for(int x=1;x&lt;=n;x++)\n        for(int y=1;y&lt;=m;y++){I(x,y,x+1,y);I(x,y,x,y+1);I(x,y,x-1,y);I(x,y,x,y-1);}\n    S=0,T=n*m+1;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            if(a[i][j]==1) Iadd(S,c(i,j),inf);\n            if(a[i][j]==2) Iadd(c(i,j),T,inf);\n        }\n    printf(\"%d\\n\",mxflow());\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#_2","title":"\u65b9\u683c\u53d6\u6570\u95ee\u9898","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u4e0e\u9a91\u58eb\u5171\u5b58\u540c\u5957\u8def\u9898\u3002</p> <p>\u53ef\u4ee5\u6ce8\u610f\u5230\u8fd9\u7c7b\u5e26\u6709\u65b9\u683c\u7684\u9898\u76ee\u6ce8\u610f\u5173\u8054\u70b9\u7684\u7279\u6b8a\u5947\u5076\u6027\uff0c\uff08\u6709\u7684\u662f\u5947\u5076\u4f18\u5316\u5efa\u56fe\uff0c\u6709\u7684\u662f\u5c31\u662f\u8fd9\u4e48\u505a\uff09</p> <p>\u867d\u7136\u9898\u76ee\u4e2d\u8bf4\u7684\u662f\u6c42\u548c\u7684\u6700\u5927\uff0c\u4f46\u8bf7\u4e0d\u8981\u5929\u771f\u7684\u8ba4\u4e3a\u662f\u6700\u5927\u6d41\uff0c\u5b83\u540c\u6837\u53ef\u4ee5\u662f\u6700\u5c0f\u5272\u3002</p> <p>\u56e0\u4e3a\u6700\u5927\u76c8\u5229 $=$ \u603b\u76c8\u5229\u4e4b\u548c $-$ \u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u672c\u9898\u4e2d\u5bf9\u4e8e\u70b9 $(i,j)$ \u4e0e\u5b83\u6709\u5173\u8054\u7684\u70b9 $(i,j+1),(i+1,j),(i-1,j),(i,j-1)$ \u6ee1\u8db3\u82e5 $(i+j)\\%2=1$ \uff0c\u90a3\u4e48\u4e0e\u5b83\u6709\u5173\u7684\u70b9\u7684\u884c\u5217\u4e4b\u548c\u5c31\u53ea\u80fd\u662f $(i+j)\\%2=0$\u3002</p> <p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5982\u679c\u6ca1\u6709\u70b9\u6743\uff0c\u76f8\u5f53\u4e8e\u5c31\u662f\u4e8c\u5206\u56fe\u9009\u62e9\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u4f7f\u5f97\u6240\u9009\u70b9\u96c6\u4e2d\u4efb\u610f\u4e24\u70b9\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\u3002</p> <p>\u4f46\u7531\u4e8e\u672c\u9898\u6709\u70b9\u6743\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f7f\u7528\u4e8c\u5206\u56fe\u6765\u505a\u3002</p> <p>\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u6240\u6709 $i+j$ \u4e3a\u5947\u6570\u7684\u70b9\u4e0e\u8d85\u7ea7\u6e90\u8fde\u8fb9\uff0c\u6240\u6709 $i+j$ \u4e3a\u5076\u6570\u7684\u70b9\u5411\u8d85\u7ea7\u6c47\u8fde\u8fb9\uff0c\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u8fb9\u70b9\u6743\u90fd\u4e3a $a[i][j]$\u3002\u5bf9\u4e8e\u6709\u5173\u8054\u7684\u70b9\u5219\u8fde\u8fb9\u5bb9\u91cf\u4e3a $inf$  \uff0c\u90a3\u4e48\u6700\u5c0f\u5272\u80af\u5b9a\u4e3a\u7b80\u5355\u5272\u3002</p> <p>\u5f53\u6211\u4eec\u5272\u6389\u4e00\u6761\u8fb9\u540e\uff0c\u8868\u793a\u6211\u4eec\u820d\u5f03\u4e0e\u8fd9\u6761\u8fb9\u76f8\u90bb\u70b9\u7684\u8d21\u732e\u3002\u7531\u4e8e\u6700\u5c0f\u5272\u662f\u7b80\u5355\u5272\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5272\u5b8c\u540e\u7684\u56fe\uff0c\u4e0e\u6e90\u6c47\u6709\u8fb9\u76f8\u8fde\u7684\u70b9\u662f\u88ab\u6211\u4eec\u9009\u62e9\u7684\u70b9\uff0c\u8fd9\u4e9b\u70b9\u95f4\u4e00\u5b9a\u4e0d\u8fde\u901a\uff08\u4e0d\u7136\u600e\u4e48\u53eb\u5272\u5462\uff1f\uff09\uff0c\u5f53\u8fd9\u4e2a\u5272\u6700\u5c0f\u65f6\uff0c\u6211\u4eec\u629b\u5f03\u7684\u4ee3\u4ef7\u5c31\u8d8a\u5c0f\u3002\u7528\u603b\u76c8\u5229\u548c\u51cf\u53bb\u540e\uff0c\u5c31\u662f\u6211\u4eec\u6240\u8981\u7684\u7b54\u6848\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e2+9;\nconst int N2 = 1e4+9;\nconst int inf = 2e9;\nint n,m,a[N][N],head[N2],tot;\nstruct pp{int nxt,to,val;}g[N2*10];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid E(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint c(int x,int y){return (x-1)*m+y;}\nint S,T,dep[N2],cur[N2];\nint dx[4]={1,-1,0,0};\nint dy[4]={0,0,1,-1};\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[S]=1;\n    queue&lt;int&gt;q;q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(g[i].val&amp;&amp;dep[v]==dep[u]+1){\n            int res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=n*m+1;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++) scanf(\"%d\",&amp;a[i][j]);\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            if((i+j)%2){\n                E(S,c(i,j),a[i][j]);\n                for(int k=0;k&lt;4;k++){\n                    int nx=i+dx[k],ny=j+dy[k];\n                    if(nx&lt;1||nx&gt;n||ny&lt;1||ny&gt;m) continue;\n                    E(c(i,j),c(nx,ny),inf);\n                }\n            }\n            else E(c(i,j),T,a[i][j]);\n        }\n    int sum=0;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++) sum+=a[i][j];\n    printf(\"%d\\n\",sum-mxflow());\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#_3","title":"\u6700\u5c11\u5272\u8fb9\u6700\u5c0f\u5272","text":"<p>\u4e0d\u662f\u5177\u4f53\u7684\u67d0\u9053\u9898\uff0c\u5c31\u53ea\u662f\u4e00\u4e2a\u5e94\u7528\uff0c\u5b57\u9762\u610f\u601d\uff0c\u9009\u51fa\u6700\u5c0f\u5272\u4f7f\u5f97\u5272\u8fb9\u6700\u5c11\u3002</p> <p>\u76f8\u4fe1\u5bf9 [SDOI2004]LIS \u7684\u5370\u8c61\u591f\u6df1\u523b\u5427\uff0c\u90a3\u4e48\u53ef\u884c\u8fb9\u96c6\u7684\u5b9a\u4e49\u5e94\u8be5\u8fd8\u8bb0\u5f97\uff0c\u53ef\u884c\u8fb9\u5c31\u662f\u6ee1\u6d41\u5e76\u4e14 $u$ \u5230 $v$ \u65e0\u589e\u5e7f\u8def\u7684\u8fb9\uff0c\u53ef\u884c\u8fb9\u96c6\u5c31\u662f\u6240\u6709\u6700\u5c0f\u5272\u4e2d\u5272\u8fb9\u7684\u5e76\u96c6\u3002</p> <p>\u90a3\u4e48\u5982\u679c\u8981\u6c42\u6700\u5c0f\u5272\u6700\u5c11\u5272\u8fb9\u5462\uff1f\u5bf9\u53ef\u884c\u8fb9\u96c6\u4e2d\u6bcf\u6761\u8fb9\u5bb9\u91cf\u91cd\u65b0\u5b9a\u4e49\u4e3a $1$ \uff0c\u975e\u53ef\u884c\u8fb9\u5bb9\u91cf\u8d4b\u4e3a $inf$ \uff0c\u91cd\u65b0\u8dd1\u4e00\u904d\u6700\u5c0f\u5272\u5373\u53ef\u3002</p>"},{"location":"OI/flow/#happiness","title":"[\u56fd\u5bb6\u96c6\u8bad\u961f]happiness","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u6700\u5c0f\u5272\u5e94\u7528\u4e4b\u5904\u7406\u96c6\u5408\u95f4\u7684\u77db\u76fe\u5173\u7cfb\uff08\u540d\u79f0\u53ef\u80fd\u4e0d\u51c6\u786e\uff09 \u95ee\u9898\u6a21\u578b</p> <p>\u6709 $n$ \u4e2a\u7269\u54c1\u548c\u4e24\u4e2a\u96c6\u5408 $A,B$ \uff0c\u5982\u679c\u5c06\u4e00\u4e2a\u7269\u54c1\u653e\u5165 $A$ \u96c6\u5408\u4f1a\u82b1\u8d39 $a_i$ \uff0c\u653e\u5165 $B$ \u96c6\u5408\u4f1a\u82b1\u8d39 $b_i$ \uff1b\u8fd8\u6709\u82e5\u5e72\u4e2a\u5f62\u5982 $(u_i,v_i,w_i)$ \u9650\u5236\u6761\u4ef6\uff0c\u8868\u793a\u5982\u679c $u_i$ \u548c $v_i$ \u540c\u65f6\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u4f1a\u82b1\u8d39 $w_i$ \u3002\u6bcf\u4e2a\u7269\u54c1\u5fc5\u987b\u4e14\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u6700\u5c0f\u7684\u4ee3\u4ef7\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 \u4e8c\u8005\u9009\u5176\u4e00 \u7684\u6700\u5c0f\u5272\u9898\u76ee\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\u8bbe\u7f6e\u6e90\u70b9 $S$ \u548c\u6c47\u70b9 $T$ \uff0c\u7b2c $i$ \u4e2a\u70b9\u7531 $S$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $a_i$ \u7684\u8fb9\u3001\u5411 $T$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $b_i$ \u7684\u8fb9\u3002\u5bf9\u4e8e\u9650\u5236\u6761\u4ef6 $i$ \uff0c\u6211\u4eec\u5728 $u_i,v_i$ \u4e4b\u95f4\u8fde\u5bb9\u91cf\u4e3a $w_i$ \u7684\u53cc\u5411\u8fb9\u3002</p> <p>\u6ce8\u610f\u5230\u5f53\u6e90\u70b9\u548c\u6c47\u70b9\u4e0d\u76f8\u8fde\u65f6\uff0c\u4ee3\u8868\u8fd9\u4e9b\u70b9\u90fd\u9009\u62e9\u4e86\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u5c06\u8fde\u5411 $S$ \u6216 $T$ \u7684\u8fb9\u5272\u5f00\uff0c\u8868\u793a\u4e0d\u653e\u5728 $A$ \u6216 $B$ \u96c6\u5408\uff0c\u5982\u679c\u628a\u7269\u54c1\u4e4b\u95f4\u7684\u8fb9\u5272\u5f00\uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u7269\u54c1\u4e0d\u653e\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u3002</p> <p>\u6700\u5c0f\u5272\u5c31\u662f\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>\u672c\u9898\u5c31\u662f\u8fd9\u5957\u6a21\u578b\u7684\u57fa\u672c\u5e94\u7528\uff0c\u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u89e3\u6cd5\u4e5f\u9887\u4e3a\u5de7\u5999\uff0c\u5c06\u5728\u4e0b\u4e00\u9053\u9898\u4e2d\u4ecb\u7ecd\u3002</p> <p>\u6211\u5728\u5199\u8fd9\u9053\u9898\u662f\u8fd8\u6ca1\u6709\u63a5\u89e6\u5230\u8fd9\u4e2a\u6a21\u578b\uff0c\u53ea\u662f\u770b\u5230\u9898\u89e3\u4e2d\u90a3\u79cd\u89e3\u65b9\u7a0b\u7684\u601d\u60f3\uff0c\u4f46\u4e24\u8005\u672c\u8d28\u76f8\u540c\uff0c\u7ed3\u5408\u8fd9\u9053\u9898\uff0c\u5148\u7528\u6734\u7d20\u7684\u601d\u60f3\u8bb2\u89e3\u3002</p> <p></p> <p>\u8fd9\u79cd\u89e3\u65b9\u7a0b\u7684\u505a\u6cd5\u5176\u5b9e\u5c31\u662f\u6a21\u578b\u7684\u57fa\u672c\u601d\u8def\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u9053\u9898\u4e0d\u80fd\u76f4\u63a5\u5957\u7528\u6a21\u578b\uff0c\u56e0\u4e3a\u5f53 $i,j$ \u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\u624d\u4f1a\u6709\u8d21\u732e\u3002\u6240\u4ee5\u8fd8\u662f\u5f97\u901a\u8fc7\u5bf9\u8fb9\u8d4b\u6743\u7684\u65b9\u5f0f\uff0c\u6216\u8005\u8d39\u7528\u63d0\u524d/\u9000\u56de\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u5904\u7406\uff0c\u4e0e\u89e3\u65b9\u7a0b\u5927\u81f4\u76f8\u4f3c\u3002</p> <p>\u8fd9\u91cc\u6709\u4eba\u53ef\u80fd\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u6a21\u578b\u4e2d\u662f\u5efa\u53cc\u5411\u8fb9\u6709\u4e9b\u7591\u60d1\uff0c\u5bf9\u6b64\uff0c\u6211\u7684\u8bf4\u6cd5\u662f\uff1a\u6700\u5c0f\u5272\u51c6\u786e\u6765\u8bb2\u5e76\u4e0d\u80fd\u8bf4\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f $S,T$ \u4e0d\u8fde\u901a\uff0c\u800c\u662f\u5f97\u8bb2\u6210\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u5f97 $S,T$ \u4e4b\u95f4\u65e0\u589e\u5e7f\u8def\u3002\u5728\u4e0a\u8ff0\u56fe\u4e2d\uff0c\u6700\u5c0f\u5272\u5e76\u4e0d\u4f1a\u5bf9\u4e8e\u4e2d\u95f4\u4e24\u6761\u8fb9\u5168\u90e8\u9009\u62e9\uff0c\u8fd9\u5c31\u662f\u6709\u65e0\u589e\u5e7f\u8def\u548c\u662f\u5426\u8054\u901a\u7684\u533a\u522b\uff0c\u5373\u8fd9\u4e9b\u8fb9\u6709\u5411\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5b83\u4eec\u5272\u5230\u4ece $S$ \u65e0\u6cd5\u5230 $T$ \u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e2+9;\nconst int N2 = 1e5+9;\nconst int inf = 1e9;\nint n,m,p[N][N];\nint a[N][N],b[N][N];\nint head[N2],tot,cur[N2],dep[N2];\nstruct pp{int nxt,to,val;}g[N2*10];\nint c(int x,int y){return (x-1)*m+y;}\nint S,T;\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid E(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[S]=1;\n    queue&lt;int&gt;q;while(!q.empty()) q.pop();q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(dep[v]==dep[u]+1&amp;&amp;g[i].val){\n            int res=Dinic(v,min(g[i].val,flow));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=n*m+1;int sum=0;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){scanf(\"%d\",&amp;a[i][j]);sum+=a[i][j];a[i][j]*=2;}\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){scanf(\"%d\",&amp;b[i][j]);sum+=b[i][j];b[i][j]*=2;}\n    memset(p,0,sizeof(p));\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int x;scanf(\"%d\",&amp;x);sum+=x;\n            p[i][j]+=x;a[i][j]+=x,a[i+1][j]+=x;\n        }\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int x;scanf(\"%d\",&amp;x);sum+=x;\n            p[i][j]+=x;b[i][j]+=x,b[i+1][j]+=x;\n        }\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;=m;j++){\n            E(c(i,j),c(i+1,j),p[i][j]);E(c(i+1,j),c(i,j),p[i][j]);\n        }\n    memset(p,0,sizeof(p));\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;m;j++){\n            int x;scanf(\"%d\",&amp;x);sum+=x;\n            p[i][j]+=x;a[i][j]+=x,a[i][j+1]+=x;\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;m;j++){\n            int x;scanf(\"%d\",&amp;x);sum+=x;\n            p[i][j]+=x;b[i][j]+=x,b[i][j+1]+=x;\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;m;j++){\n            E(c(i,j),c(i,j+1),p[i][j]);E(c(i,j+1),c(i,j),p[i][j]);\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            E(S,c(i,j),a[i][j]);E(c(i,j),T,b[i][j]);\n        }\n    int wrt=mxflow();sum*=2;\n    printf(\"%d\\n\",(sum-wrt)/2);\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#_4","title":"\u6587\u7406\u5206\u79d1","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u8fd9\u9053\u9898\u672c\u8d28\u548c\u4e0a\u9762\u90a3\u9053\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u89e3\u6cd5\u3002</p> <p>\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 $x$ \u8868\u793a\u76f8\u90bb\u7684 $4$ \u4e2a\u4eba\u548c\u81ea\u5df1\u90fd\u9009\u62e9\u6587\u79d1\u3002\u90a3\u4e48\u4ece\u6e90\u70b9\u6d41\u5411 $x$ \u4e00\u6761\u5bb9\u91cf\u4e3a \u540c\u9009\u6587\u79d1\u7684\u6ee1\u610f\u5ea6 \u7684\u8fb9  $e$ \u3002\u518d\u4ece $x$ \u5411\u8fd9 $5$ \u4e2a\u4eba\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $inf$ \u7684\u8fb9\u3002\u5bf9\u4e8e\u7406\u79d1\u5219\u66f4\u6539\u4e0b\u65b9\u5411\u4ee5\u76f8\u540c\u65b9\u5f0f\u5904\u7406\u3002</p> <p>\u8fd9\u4e2a\u505a\u6cd5\u662f\u4ece\u5b66\u957f\u7684\u535a\u5ba2\u4e2d\u770b\u5230\u7684\u3002\u5b66\u957f\u7684\u535a\u5ba2\uff0c\u9898\u76ee\u662f\u4e0a\u4e00\u9053\u9898happiness</p> <p>\u8003\u8651\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\uff0c\u56e0\u4e3a\u5982\u679c $e$ \u4e0d\u88ab\u5272\u6389\u610f\u5473\u7740\u8fd9 $5$ \u4e2a\u4eba\u6240\u4ee3\u8868\u7684\u70b9\u5fc5\u987b\u548c $x$ \u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u5373\u6536\u83b7\u540c\u9009\u6587\u79d1\u7684\u6ee1\u610f\u503c\u3002\u539f\u56e0\u662f $x$ \u4e0e\u5176\u5b83 $5$ \u4e2a\u70b9\u7684\u8fde\u8fb9\u6743\u503c\u662f $inf$ \uff0c\u5982\u679c\u4e24\u8005\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u8fd9\u6761\u4e3a $inf$ \u7684\u8fb9\u4e00\u5b9a\u4f1a\u88ab\u5272\u6389\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p>\u82e5 $e$ \u88ab\u5272\u6389\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u6d41\u6d41\u5411 $x$ \uff0c\u5373\u5b83\u4e0d\u4f1a\u5bf9\u6700\u5c0f\u5272\uff08\u5373\u6700\u5927\u6d41\uff09\u4ea7\u751f\u8d21\u732e\u3002\u539f\u56e0\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u8fb9\u662f\u6709\u5411\u8fb9\uff0c\u6700\u5c0f\u5272\u7684\u610f\u4e49\u662f\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u5f97 $S$ \u6ca1\u6709\u5230 $T$ \u7684\u589e\u5e7f\u8def\uff0c\u5373\u8fd9\u4e2a $x$ \u5c06\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002</p>"},{"location":"OI/flow/#includebitsstdch-using-namespace-std-const-int-n-1e29-const-int-n2-1e59-const-int-inf-1e9-int-nmheadn2tot-int-depn2curn2st-int-cint-xint-yreturn-x-1my-int-dx51-1000-int-dy5001-10-struct-ppint-nxttovalgn210-void-addint-uint-vint-w-gtotnxtheadugtottovgtotvalwheadutot-void-eint-uint-vint-wadduvwaddvu0return-int-bfs-memsetdep0sizeofdepdeps1-queueintqwhileqempty-qpopqpushs-whileqempty-int-uqfrontqpop-forint-iheadui-1iginxt-int-vgito-ifgivaldepvdepvdepu1qpushv-return-dept-int-dinicint-uint-flow-ifut-return-flow-int-cnt0-forint-icurui-1iginxt-int-vgito-ifdepvdepu1gival-int-resdinicvmingivalflow-gival-resgi1valres-cntresflow-res-ifflow-break-ifcnt-depu0-return-cnt-int-mxflow-int-ans0-whilebfs-forint-isiti-curiheadi-ansdinicsinf-return-ans-int-main-memsethead-1sizeofheadtot-1-scanfddnms0t3nm1int-sum0-forint-i1ini-forint-j1jmj-int-xscanfdxescijxsumx-forint-i1ini-forint-j1jmj-int-xscanfdxecijtxsumx-forint-i1ini-forint-j1jmj-int-ascanfdasuma-int-pscijnmespsa-forint-k0k5k-int-xidxkyjdyk-ifx1xny1ym-continue-epscxyinf-forint-i1ini-forint-j1jmj-int-ascanfdasuma-int-pscij2nmepsta-forint-k0k5k-int-xidxkyjdyk-ifx1xny1ym-continue-ecxypsinf-int-wrtmxflow-printfdnsum-wrt-return-0","title":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e2+9;\nconst int N2 = 1e5+9;\nconst int inf = 1e9;\nint n,m,head[N2],tot;\nint dep[N2],cur[N2],S,T;\nint c(int x,int y){return (x-1)*m+y;}\nint dx[5]={1,-1,0,0,0};\nint dy[5]={0,0,1,-1,0};\nstruct pp{int nxt,to,val;}g[N2*10];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid E(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[S]=1;\n    queue&lt;int&gt;q;while(!q.empty()) q.pop();q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(dep[v]==dep[u]+1&amp;&amp;g[i].val){\n            int res=Dinic(v,min(g[i].val,flow));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=3*n*m+1;int sum=0;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int x;scanf(\"%d\",&amp;x);E(S,c(i,j),x);sum+=x;\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int x;scanf(\"%d\",&amp;x);E(c(i,j),T,x);sum+=x;\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int a;scanf(\"%d\",&amp;a);sum+=a;\n            int ps=c(i,j)+n*m;E(S,ps,a);\n            for(int k=0;k&lt;5;k++){\n                int x=i+dx[k],y=j+dy[k];\n                if(x&lt;1||x&gt;n||y&lt;1||y&gt;m) continue;\n                E(ps,c(x,y),inf);\n            }\n        }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            int a;scanf(\"%d\",&amp;a);sum+=a;\n            int ps=c(i,j)+2*n*m;E(ps,T,a); \n            for(int k=0;k&lt;5;k++){\n                int x=i+dx[k],y=j+dy[k];\n                if(x&lt;1||x&gt;n||y&lt;1||y&gt;m) continue;\n                E(c(x,y),ps,inf);\n            }\n        }\n    int wrt=mxflow();\n    printf(\"%d\\n\",sum-wrt);\n    return 0;\n}\n</code></pre>","text":""},{"location":"OI/flow/#icpc-beijing-2006","title":"[ICPC-Beijing 2006]\u72fc\u6293\u5154\u5b50","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u6700\u5c0f\u5272\u8f6c\u6700\u77ed\u8def\u7684\u5e94\u7528\u3002</p> <p>\u8fd9\u79cd\u9898\u7528 $Dinic$ \u6ee1\u8db3\u6b63\u786e\u6027\uff0c\u4f46\u662f\u5728\u70b9\u6570\u548c\u8fb9\u6570\u6781\u591a\u7684\u60c5\u51b5\u4e0b\uff0c$Dinic$ \u7684\u6548\u7387\u5c31\u4e0d\u5c3d\u4eba\u610f\u4e86\u3002</p> <p>\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e \u5e73\u9762\u65e0\u5411\u56fe \u6765\u8bf4\uff0c\u5b83\u7684\u6700\u5c0f\u5272\u662f\u8fde\u7eed\u7684\uff0c\u5728\u8fd9\u9053\u9898\u4e2d\u4f53\u73b0\u7684\u66f4\u52a0\u660e\u663e\u3002</p> <p>\u8fd9\u662f\u5f20\u7f51\u683c\u56fe\uff0c\u6309\u7167\u8f6c\u5bf9\u5076\u56fe\u7684\u5957\u8def\uff0c\u6211\u4eec\u628a\u5728\u5bf9\u5076\u56fe\u4e0a / \u7a7f\u8fc7\u539f\u6765\u67d0\u6761\u8fb9\u7684 / \u8fb9\u7684\u8fb9\u6743 / \u8d4b\u4e3a / \u539f\u56fe\u4e2d\u88ab\u7a7f\u8fc7\u8fb9\u7684\u8fb9\u6743\uff08\u65ad\u53e5\u597d\u8bc4\uff09\u3002</p> <p>\u90a3\u4e48<sub>~\u663e\u7136</sub>~\uff0c\u6211\u4eec\u7684\u6700\u5c0f\u5272\u662f\u4e00\u6761\u8fde\u7eed\u7684\u7ebf\u5c06\u6574\u4e2a\u7f51\u683c\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0c\u539f\u56e0\u662f\u5982\u679c\u4e0d\u80fd\u4e00\u7b14\u753b\u5c06\u8fd9\u4e2a\u7f51\u683c\u9694\u5f00\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u4f1a\u5b58\u5728\u4e00\u6761\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u8def\u5f84\uff08\u8fd9\u91cc\u6709\u4e24\u4e2a\u7279\u6b8a\u6761\u4ef6\u5bfc\u81f4\u8fd9\u4e2a\u7ed3\u679c 1.\u80fd\u753b\u6210\u5e73\u9762\u56fe 2.\u56fe\u662f\u65e0\u5411\u7684\uff0c\u56fe\u6709\u5411\u5f88\u5bb9\u6613\u627e\u51fa\u53cd\u4f8b\uff09\u3002</p> <p>\u90a3\u4e48\u8fd9\u6761\u5272\u5728\u8fb9\u7f18\u8be5\u600e\u4e48\u8bdd\u5462\uff1f\uff08\u5373\u8d85\u7ea7\u6e90\u548c\u8d85\u7ea7\u6c47\u8be5\u600e\u4e48\u5e72\uff09</p> <p>\u8fd9\u4e2a\u5176\u5b9e\u8fd8\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u770b\u4e0b\u9762\u8fd9\u4e2a\u56fe\u5c31\u61c2\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u8981\u5272\u5f00\u8fd9\u4e2a\u7f51\u683c\u56fe\uff0c\u90a3\u5bf9\u5076\u56fe\u4e0a\u7684\u8def\u5f84\u7684\u8d77\u6b62\u70b9\u5fc5\u987b\u4e00\u4e2a\u5728\u5de6\u4e0b\uff0c\u4e00\u4e2a\u5728\u53f3\u4e0a\u3002\uff08\u8bf7\u81ea\u884c\u8bc1\u660e\uff09</p> <p></p> <p>\u4e5f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff08\u5c3d\u7ba1\u4e0d\u662f\u8fd9\u9053\u9898\uff09\uff1a</p> <p></p> <p>\u90a3\u4e48\u4f60\u8981\u6700\u5c0f\u5272\uff0c\u5c31\u662f\u65b0\u56fe\u4e0a $S$ \u5230 $T$ \u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u672c\u9898\u7ed3\u675f\u3002</p> <p>\u5e73\u9762\u56fe\u8f6c\u5bf9\u5076\u56fe</p> <p>\u9898\u89e3\u53ca\u8d44\u6599</p>"},{"location":"OI/flow/#includebitsstdch-using-namespace-std-define-ll-long-long-define-pi-pairll-int-const-int-n-1009-const-int-n2-2e69-int-nmheadn2tot-int-st-struct-ppint-nxttoll-valgn22-void-addint-uint-vll-w-gtotnxtheadugtottovgtotvalwheadutot-void-eint-uint-vll-wadduvwaddvuwreturn-int-itnnotnncnt-ll-disn2int-visn2-priority_queuepi-q-void-dij-memsetvis0sizeofvis-memsetdis-1sizeofdisdiss0-whileqempty-qpopqpushmake_pair0s-whileqempty-int-uqtopsecondqpop-ifvisu-continuevisu1-forint-iheadui-1iginxt-int-vgito-ifdisv-1disvdisugival-disvdisugival-qpushmake_pair-disvv-return-int-main-memsethead-1sizeofheadtot0-scanfddnms0tn-1m-121cnt0-forint-i1ini-forint-j1jmj-itijcntotijcnt-forint-i1ini-forint-j1jmj-ll-xscanflldx-ifin-eoti-1jtx-else-ifi1-esitijx-else-eoti-1jitijx-forint-i1ini-forint-j1jmj-ll-xscanflldx-ifjm-esitij-1x-else-ifj1-etotijx-else-eitij-1otijx-forint-i1ini-forint-j1jmj-ll-xscanflldx-eotijitijx-dij-printflldndist-return-0","title":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\n#define pi pair&lt;ll ,int &gt;\nconst int N = 1009;\nconst int N2 = 2e6+9;\nint n,m,head[N2],tot; \nint S,T;\nstruct pp{int nxt,to;ll val;}g[N2&lt;&lt;2];\nvoid add(int u,int v,ll w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid E(int u,int v,ll w){add(u,v,w);add(v,u,w);return ;}\nint it[N][N],ot[N][N],cnt;\nll dis[N2];int vis[N2];\npriority_queue&lt;pi &gt;q;\nvoid dij(){\n    memset(vis,0,sizeof(vis));\n    memset(dis,-1,sizeof(dis));dis[S]=0;\n    while(!q.empty()) q.pop();q.push(make_pair(0,S));\n    while(!q.empty()){\n        int u=q.top().second;q.pop();\n        if(vis[u]) continue;vis[u]=1;\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(dis[v]==-1||dis[v]&gt;dis[u]+g[i].val){\n                dis[v]=dis[u]+g[i].val;\n                q.push(make_pair(-dis[v],v));\n            }        \n        }\n    }\n    return ;\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=0;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=(n-1)*(m-1)*2+1,cnt=0;\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;m;j++) it[i][j]=++cnt,ot[i][j]=++cnt;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;m;j++){\n            ll x;scanf(\"%lld\",&amp;x);\n            if(i==n) E(ot[i-1][j],T,x);\n            else{\n                if(i==1) E(S,it[i][j],x);\n                else E(ot[i-1][j],it[i][j],x);\n            }\n        }\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;=m;j++){\n            ll x;scanf(\"%lld\",&amp;x);\n            if(j==m) E(S,it[i][j-1],x);\n            else{\n                if(j==1) E(T,ot[i][j],x);\n                else E(it[i][j-1],ot[i][j],x);\n            }\n        }\n    for(int i=1;i&lt;n;i++)\n        for(int j=1;j&lt;m;j++){\n            ll x;scanf(\"%lld\",&amp;x);\n            E(ot[i][j],it[i][j],x);\n        }\n    dij();\n    printf(\"%lld\\n\",dis[T]);\n    return 0;\n}\n</code></pre>","text":""},{"location":"OI/flow/#ctsc1999","title":"[CTSC1999]\u5bb6\u56ed/\u661f\u9645\u8f6c\u79fb\u95ee\u9898","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u518d\u70b9\u5f00\u9898\u89e3\u7684\u4e00\u77ac\u95f4\uff0c\u6211\u610f\u8bc6\u5230\u53ef\u4ee5\u4e8c\u5206\u51fa\u6700\u77ed\u65f6\u95f4\uff0c\u5bf9\u4e8e\u8be5\u65f6\u95f4\u4e0b\u5efa\u4e00\u5f20\u56fe\uff0c\u8dd1\u4e00\u904d\u7f51\u7edc\u6700\u5927\u6d41\u6765\u786e\u5b9a\u6700\u591a\u6709\u591a\u5c11\u4eba\u80fd\u8f6c\u79fb\u5230\u6708\u7403\uff0c\u672c\u9898\u7ed3\u675f\u3002</p> <p>\u5efa\u56fe\u662f\u6709\u8bb2\u7a76\u7684\uff0c\u91c7\u7528\u5206\u5c42\u56fe\u7684\u601d\u60f3\uff0c\u6bcf\u4e2a\u65f6\u95f4\u4e3a\u4e00\u5c42\uff0c\u6309\u7167\u822a\u7ebf\u5148\u540e\u987a\u5e8f\u8fde\u8fb9\uff0c\u5efa\u7acb\u8d85\u7ea7\u6e90\u548c\u8d85\u7ea7\u6c47\u5373\u53ef\uff08\u56e0\u4e3a\u65f6\u95f4\u6709\u5148\u540e\uff0c\u4e0d\u80fd\u665a\u5230\u7684\u4eba\u5750\u4e0a\u65e9\u5230\u7684\u8f66\uff0c\u6240\u4ee5\u5f97\u5206\u5c42\u56fe\uff09\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 109;\nconst int N2 = 16e3+9;\nconst int inf = 1e9;\nint n,m,k,head[N2],tot;\nstruct pp{int nxt,to,val;}g[N2*10];\nvoid add(int u,int v,int w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=w,head[u]=tot;\n}\nvoid E(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint ht[N],nt[N],a[N][N],S,T;\nvoid init(int t){\n    memset(head,-1,sizeof(head));tot=-1;\n    S=0,T=n*(t+1)+1;\n    for(int i=1;i&lt;=m;i++){\n        int ps=0;\n        for(int j=1;j&lt;=t;j++){\n            ps=ps%nt[i]+1;int nps=ps%nt[i]+1;\n            E((j-1)*n+a[i][ps],j*n+a[i][nps],ht[i]);\n        }\n    }\n    for(int i=0;i&lt;t;i++) for(int j=1;j&lt;=n;j++) E(i*n+j,(i+1)*n+j,inf);\n    for(int i=0;i&lt;=t;i++) E(S,i*n+1,inf);\n    for(int i=1;i&lt;=t+1;i++) E(i*n,T,inf);\n    return ;\n}\nint dep[N2],cur[N2];\nint bfs(){\n    memset(dep,0,sizeof(dep));dep[S]=1;\n    queue&lt;int &gt;q;q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val&amp;&amp;!dep[v]){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T];\n}\nint Dinic(int u,int flow){\n    int cnt=0;if(u==T) return flow;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(g[i].val&amp;&amp;dep[v]==dep[u]+1){\n            int res=Dinic(v,min(flow,g[i].val));\n            g[i].val-=res,g[i^1].val+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\nint mxflow(){\n    int ans=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        ans+=Dinic(S,inf);\n    }\n    return ans;\n}\nint check(int x){\n    init(x);\n    int p=mxflow();\n    if(p&gt;=k) return 1;\n    return 0;\n}\nint main(){\n    scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;k);n+=2;\n    for(int i=1;i&lt;=m;i++){\n        scanf(\"%d%d\",&amp;ht[i],&amp;nt[i]);\n        for(int j=1;j&lt;=nt[i];j++){\n            scanf(\"%d\",&amp;a[i][j]);a[i][j]+=1;if(!a[i][j]) a[i][j]=n;\n        }\n    }\n    int l=1,r=1000,ans=0;\n    while(l&lt;=r){\n        int mid=(l+r)&gt;&gt;1;\n        if(check(mid)) r=mid-1,ans=mid;\n        else l=mid+1;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#noi2008","title":"[NOI2008]\u5fd7\u613f\u8005\u62db\u52df","text":"<p>\u9898\u9762\u94fe\u63a5</p> <p>\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u7ecf\u5178\u7684\u5efa\u6a21\u9898\uff0c\u5728\u9898\u89e3\u533a\u6709\u4e00\u7bc7\u4e0d\u9519\u7684\u9898\u89e3</p> <p>\u6e90\u70b9\u8fde\u7b2c\u4e00\u5929\uff0c\u6c47\u70b9\u8fde\u6700\u540e\u4e00\u5929\uff0c\u5bb9\u91cf\u4e3a $inf$ \u8d39\u7528\u4e3a $0$</p> <p>\u8fd9\u6837\u8dd1\u7f51\u7edc\u6d41\u662f\u6cbf\u65f6\u95f4\u6d41\u7684\uff08\u5c31\u662f\u4f9d\u6b21\u89e3\u51b3\u6bcf\u4e00\u5929\u7684\u95ee\u9898\uff09</p> <p>\u7136\u540e\u6bcf\u4e00\u5929\u5411\u540e\u4e00\u5929\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $inf-a[i]$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9</p> <p>\u4e3a\u4ec0\u4e48\u5bb9\u91cf\u4e3a $inf-a[i]$\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5c11\u4e86 $a[i]$\uff0c\u5f97\u7528\u5e26\u6743\u8fb9\u8865\u5168 $inf$ \uff0c\uff08\u8fd9\u4e2a\u6d41\u91cf\u9700\u8981\u88ab\u4e0b\u9762\u7684\u5e26\u6743\u8fb9\u8865\u9f50\u7684\uff0c\u5e76\u4e14\u5b83\u4e00\u5b9a\u4f1a\u88ab\u8865\u9f50\uff0c\u56e0\u4e3a\u6700\u5927\u6d41\u91cf\u4e00\u5b9a\u662f $inf$ \u8dd1\u6ee1\u7684\uff09</p> <p>\u7136\u540e\u5c06\u6bcf\u4e00\u7c7b\u5fd7\u613f\u8005 $s[i]$ \u4e0e $t[i]+1$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $inf$ \u82b1\u8d39\u4e3a $c[i]$ \u7684\u8fb9</p> <p>\u5f53\u8fde\u7eed\u5e72\u7684\u4eba\u4e0d\u591f\u65f6\uff0c\u5c31\u5f97\u5145\u94b1\u4f7f\u52b2\u5f80\u91cc\u585e\u4eba\uff0c\u8865\u5168 $inf$ \u7684\u5bb9\u91cf</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long \nconst int N = 1e5+9;\nconst int inf = 1e9;\nint n,m,head[N],tot;\nstruct pp{int nxt,to,val;ll cst;}g[N&lt;&lt;1];\nvoid add(int u,int v,int fl,ll w){\n    g[++tot].nxt=head[u],g[tot].to=v,g[tot].val=fl,g[tot].cst=w,head[u]=tot;\n}\nvoid El(int u,int v,int fl,ll w){add(u,v,fl,w);add(v,u,0,-w);return ;}\nint S,T;ll ans,dis[N];\nint pre[N],lst[N],flw[N],flag[N];\nqueue&lt;int &gt;q;\nbool spfa(int s,int t){\n    while(!q.empty()) q.pop();\n    for(int i=s;i&lt;=t;i++) dis[i]=-1,flw[i]=0,flag[i]=0;\n    dis[s]=0,flag[s]=1,pre[t]=-1,flw[s]=inf;q.push(s);\n    while(!q.empty()){\n        int u=q.front();q.pop();flag[u]=0;\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(g[i].val){\n                if(dis[v]==-1||dis[v]&gt;dis[u]+g[i].cst){\n                    dis[v]=dis[u]+g[i].cst,pre[v]=u,lst[v]=i;\n                    flw[v]=min(flw[u],g[i].val);\n                    if(!flag[v]){flag[v]=1;q.push(v);}\n                }\n            }\n        }\n    }\n    return pre[t]!=-1;\n}\nvoid MCMF(){\n    ans=0;\n    while(spfa(S,T)){\n        int now=T,fl=flw[T];ans+=dis[T]*fl;\n        while(now!=S){\n            g[lst[now]].val-=fl;\n            g[lst[now]^1].val+=fl;\n            now=pre[now];\n        }\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));tot=-1;\n    scanf(\"%d%d\",&amp;n,&amp;m);S=0,T=n+2;El(S,S+1,inf,0);El(T-1,T,inf,0);\n    for(int i=1;i&lt;=n;i++){int x;scanf(\"%d\",&amp;x);El(i,i+1,inf-x,0);}\n    for(int i=1;i&lt;=m;i++){int s,t,w;scanf(\"%d%d%d\",&amp;s,&amp;t,&amp;w);El(s,t+1,inf,w);}\n    MCMF();printf(\"%lld\\n\",ans);\n    return 0;\n}\n</code></pre>"},{"location":"OI/flow/#2017","title":"[\u516d\u7701\u8054\u80032017]\u5bff\u53f8\u9910\u5385","text":"<p>\u9898\u610f\u7b80\u8ff0\uff1a</p> <p>\u6709 $n$ \u79cd\u5bff\u53f8\uff0c\u7b2c $i$ \u79cd\u5bff\u53f8\u7684\u7c7b\u578b\u4e3a $a_i$</p> <p>\u5982\u679c\u4f60\u5403\u4e86\u7b2c $i$ \u79cd\u5230\u7b2c $j$ \u79cd\u5bff\u53f8\uff0c\u4f60\u4f1a\u5f97\u5230 $\\sum d_{i,j}(i\\le j)$ \u7684\u6536\u76ca\u3002</p> <p>\u5982\u679c\u4f60\u5403\u4e86 $c,c &gt; 0$ \u79cd\u7c7b\u578b\u4e3a $x$ \u7684\u5bff\u53f8\uff0c\u4f60\u4f1a\u4ed8\u51fa $mx^2+cx$ \u7684\u4ee3\u4ef7 $m\\in{0,1}$\u3002</p> <p>\u6700\u5927\u5316\u6536\u76ca\u4e0e\u4ee3\u4ef7\u7684\u5dee\u3002</p> <p>\u7b80\u8981\u9898\u89e3\uff1a</p> <p>\u76f8\u5f53\u4e8e\u9009\u4e86 $d_{i,j}$ \u5c31\u4e00\u5b9a\u8981\u9009 $d_{i+1,j}$ \u548c $d_{i,j-1}$ \uff0c\u9009\u4e86\u4e00\u4e2a\u70b9\uff0c\u5c31\u5fc5\u987b\u9009\u5b83\u7684\u540e\u7ee7\uff0c\u8ba9\u6211\u4eec\u6700\u5927\u5316\u6536\u76ca\u548c\u4ee3\u4ef7\u7684\u5dee</p> <p>\u8fd9\u4e0d\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u662f\u5565</p> <p>\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe</p> <p>\u5b9a\u4e49\u5c31\u662f\u9009\u4e86 $u$ \uff0c\u5fc5\u987b\u8981\u9009 $u$ \u7684\u6240\u6709\u540e\u7ee7</p> <p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u8981\u4e3a\u4e86\u4e00\u4e2a\u6536\u76ca\u5f88\u9ad8\u7684\u70b9\u800c\u88ab\u8feb\u9009\u4e86\u4e00\u4e2a\u4e0d\u4f18\u7684\u540e\u7ee7</p> <p>\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u6700\u5c0f\u5272</p> <p>\u6211\u4eec\u8ba4\u4e3a\u6700\u7ec8\u5f97\u5230\u7684\u56fe\u4e2d\uff0c\u4e0e $S$ \u8054\u901a\u7684\u8282\u70b9\u662f\u88ab\u6211\u4eec\u9009\u62e9\u7684</p> <p>\u82e5\u4e00\u4e2a\u7269\u54c1\u8fde\u5411 $S$ \u8fb9\u6743\u4e3a $a$ \uff0c\u8fde\u5411 $T$ \u8fb9\u6743\u4e3a $0$ \uff0c\u5219\u8868\u793a\u9009\u62e9\u5b83\u6709 $a$ \u7684\u6536\u76ca</p> <p>\u82e5\u4e00\u4e2a\u7269\u54c1\u8fde\u5411 $S$ \u8fb9\u6743\u4e3a $0$ \uff0c\u8fde\u5411 $T$ \u8fb9\u6743\u4e3a $b$ \uff0c\u5219\u8868\u793a\u9009\u62e9\u5b83\u8981\u82b1\u8d39 $b$ \u7684\u4ee3\u4ef7</p> <p>\u5b9e\u9645\u8fc7\u7a0b\u4e2d\uff0c\u8fde\u5411 $S,T$ \u7684\u8fb9\u4e0d\u4e00\u5b9a\u5176\u4e2d\u6709\u4e00\u6761\u4e00\u5b9a\u662f $0$ \uff0c\u8fd9\u91cc\u53ea\u662f\u65b9\u4fbf\u7406\u89e3\uff0c\u4f46\u6d41\u91cf\u4e00\u5b9a\u4e3a\u6b63\uff08\u82e5\u6536\u76ca\u662f\u8d1f\u7684\uff0c\u53ef\u4ee5\u60f3 $T$ \u8fde\u4e00\u6761\u6b63\u8fb9\u8868\u793a\u9009\u5b83\u8981\u82b1\u8d39\u591a\u5c11\uff09</p> <p>\u524d\u9a71\u8fde\u5411\u540e\u7ee7\u4e00\u6761 $+\\infty$ \u6d41\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u6700\u5c0f\u5272\u4e00\u5b9a\u4e0d\u4f1a\u628a\u8fd9\u6761\u8fb9\u5272\u5f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u9009\u4e86\u524d\u9a71\u5c31\u4e00\u5b9a\u5f97\u9009\u540e\u7ee7\uff0c\u9009\u4e86\u540e\u7ee7\u4e0d\u4e00\u5b9a\u8981\u9009\u524d\u9a71</p> <p>\u597d\u4e86\uff0c\u4e0a\u9762\u7684\u5efa\u56fe\u8dd1\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u4e86</p> <p>\u8fd9\u9898\u5176\u5b9e\u633a\u677f\u7684</p> <p>\u5bf9\u4e8e $mx^2+cx$ \u6211\u4eec\u53ef\u4ee5\u770b\u6210\u9009\u4e86 $x$ \u8fd9\u4e00\u79cd\u98df\u7269\uff08\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u7b2c $x$ \u79cd\u98df\u7269\uff0c$i$ \u53f7\u5bff\u53f8\u6ee1\u8db3 $a[i]==x$ \u5411\u4ed6\u8fde $+\\infty$ \u7684\u8fb9\uff09\u5c31\u4f1a\u6709 $mx^2$ \u7684\u4ee3\u4ef7\uff0c\u5403\u4e86\u4e00\u4e2a\u5c5e\u4e8e\u7b2c $x$ \u79cd\u7684\u98df\u7269\u5c31\u8981\u82b1 $x$ \u7684\u4ee3\u4ef7\uff0c\u65b0\u5efa\u8282\u70b9\u548c\u539f\u8282\u70b9\u5206\u522b\u60f3 $T$ \u8fde\u8fb9\u5c31\u884c\u4e86</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int inf = 1e9+7;\nconst int N = 1e2+9;\n\n#define il inline\nil char gc(){\n    static char now[1&lt;&lt;20],*S,*T;\n    if (T==S){\n        T=(S=now)+fread(now,1,1&lt;&lt;20,stdin);\n        if (T==S) return EOF;\n    }\n    return *S++;\n}//getchar\nil int read(){\n    int res=0,sign=1;\n    char c;\n    while ((c=gc())&lt;'0'||c&gt;'9') if (c=='-') sign=-1;\n    res=(c^48);\n    while ((c=gc())&gt;='0'&amp;&amp;c&lt;='9') res=(res&lt;&lt;3)+(res&lt;&lt;1)+(c^48);\n    return res*sign;\n}//read a signed interger\n\nint n,m,a[N],d[N][N];\nint cnt,id[N][N];\n\nint p[N];\nvoid LSH(){\n    for(int i=1;i&lt;=n;i++) p[i]=a[i];sort(p+1,p+n+1);int len=unique(p+1,p+n+1)-p-1;\n    for(int i=1;i&lt;=n;i++) a[i]=lower_bound(p+1,p+len+1,a[i])-p;return ;\n}\n\nint head[N*N],tot;\nstruct pp{int nxt,to,flow;}g[N*N*32];\nvoid add(int u,int v,int w){g[++tot].nxt=head[u],g[tot].to=v,g[tot].flow=w,head[u]=tot;return ;}\nvoid E(int u,int v,int w){add(u,v,w);add(v,u,0);return ;}\nint S,T,dep[N*N],cur[N*N];\nqueue&lt;int &gt;q;\nbool bfs(){\n    memset(dep,0,sizeof(dep));\n    dep[S]=1;while(!q.empty()) q.pop();q.push(S);\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        for(int i=head[u];i!=-1;i=g[i].nxt){\n            int v=g[i].to;\n            if(!dep[v]&amp;&amp;g[i].flow){dep[v]=dep[u]+1;q.push(v);}\n        }\n    }\n    return dep[T]&gt;0;\n} \n\nint Dinic(int u,int flow){\n    if(u==T) return flow;\n    int cnt=0;\n    for(int &amp;i=cur[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;\n        if(dep[v]==dep[u]+1&amp;&amp;g[i].flow&gt;0){\n        //\u6ce8\u610f\u5982\u679c\u4f60\u8981\u7528 !cnt \u5219 dep[u]=0 \u7684\u8fd9\u4e2a trick \u5c31\u4e00\u5b9a\u8981\u5224 g[i].flow&gt;0 \uff0c\u4e0d\u7136\u7684\u8bdd\u4e00\u65e6\u9001\u51fa\u4e86 0 \u6d41\u91cf\u7684\u8fb9\uff0c\u8fd9\u4e2a\u70b9\u5c31\u65e0\u6cd5\u5728\u672c\u6b21\u5faa\u73af\u4e2d\u518d\u8d70\u4e86\uff0c\u4f1a\u9677\u5165\u6b7b\u5faa\u73af \n            int res=Dinic(v,min(g[i].flow,flow));\n            g[i].flow-=res,g[i^1].flow+=res;\n            cnt+=res,flow-=res;\n        }\n        if(!flow) break;\n    }\n    if(!cnt) dep[u]=0;\n    return cnt;\n}\n\nint maxflow(){\n    int sum=0;\n    while(bfs()){\n        for(int i=S;i&lt;=T;i++) cur[i]=head[i];\n        sum+=Dinic(S,inf);\n    }\n    return sum;\n}\n\nint main(){\n    n=read(),m=read();\n    for(int i=1;i&lt;=n;i++) a[i]=read();LSH();\n    for(int i=1;i&lt;=n;i++){\n        for(int j=1;j&lt;=n-i+1;j++) d[i][i+j-1]=read();\n    }\n    cnt=0;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=i;j&lt;=n;j++) id[i][j]=++cnt;\n    memset(head,-1,sizeof(head));tot=-1;\n    S=0,T=cnt+n+1;\n    for(int i=1;i&lt;=n;i++) E(id[i][i],cnt+a[i],inf);\n    for(int i=1;i&lt;=n;i++) E(cnt+i,T,m*p[i]*p[i]);\n    cnt+=n;\n    for(int i=1;i&lt;=n;i++){\n        for(int j=i;j&lt;=n;j++){\n            if(j-1&gt;=i) E(id[i][j],id[i][j-1],inf);\n            if(i+1&lt;=j) E(id[i][j],id[i+1][j],inf);\n        }\n    }\n    for(int i=1;i&lt;=n;i++){\n        if(p[a[i]]&gt;0) E(id[i][i],T,p[a[i]]);\n        else E(S,id[i][i],-p[a[i]]);\n    }\n    for(int i=1;i&lt;=n;i++)\n        for(int j=i;j&lt;=n;j++){\n            if(d[i][j]&gt;0) E(S,id[i][j],d[i][j]);\n            else E(id[i][j],T,-d[i][j]);\n        }\n    int ans=0;\n    for(int i=1;i&lt;=n;i++)\n        for(int j=i;j&lt;=n;j++) if(d[i][j]&gt;0) ans+=d[i][j];\n    ans-=maxflow();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n/*\ng++ \"[\u516d\u7701\u8054\u80032017]\u5bff\u53f8\u9910\u5385\".cpp -o A\n*/\n</code></pre>"},{"location":"OI/flow/#_5","title":"\u65e0\u9650\u4e4b\u73af","text":""},{"location":"OI/flow/#airport","title":"Airport","text":""},{"location":"OI/flow/#_6","title":"\u8d44\u6599\uff1a","text":"<p>\u7f51\u7edc\u6d41\u4e00\u822c\u5efa\u6a21\u65b9\u5f0f\u2014\u2014\u6700\u5c0f\u5272\u7bc7</p>"},{"location":"OI/lca/","title":"lca","text":"<p>\u500d\u589e\u6c42lca <pre><code>int lca(int u,int v){\n    if(dep[u]&lt;dep[v]) swap(u,v);\n    for(int i=20;i&gt;=0;i--) if(dep[f[u][i]]&gt;=dep[v]) u=f[u][i];\n    if(u==v) return u;\n    for(int i=20;i&gt;=0;i--) if(f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];\n    return f[u][0];\n}\n</code></pre></p> <p>tarjan\u6c42lca</p> <p>\u901a\u8fc7\u5e76\u67e5\u96c6\u7684\u601d\u60f3\uff0c\u6765\u786e\u5b9a lca \u3002</p> <p>\u6bcf\u6b21\u8fdb\u5165\u4e00\u68f5\u5b50\u6811\uff0c\u628a f \u503c\u8d4b\u4e3a\u81ea\u5df1\uff0c\u51fa\u53bb\u7684\u65f6\u5019 f \u503c\u8d4b\u4e3a\u81ea\u5df1\u7684\u7236\u4eb2\u3002</p> <p>\u5982\u679c\u641c\u5230\u4e00\u4e2a\u5c5e\u4e8e\u4e00\u6b21\u8be2\u95ee\u7684\u70b9 $u$\uff0c\u4e14\u53e6\u4e00\u4e2a\u70b9 $v$ \u5df2\u7ecf\u88ab\u641c\u8fc7\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684 lca \u5c31\u662f $v$ \u901a\u8fc7\u5e76\u67e5\u96c6 f \u6240\u80fd\u56de\u6eaf\u5230\u7684\u6700\u9ad8\u70b9\uff08\u7ec6\u54c1\uff09\uff0c\u5373 find(v)\u3002</p> <pre><code>void dfs(int u,int fa){\n    dep[u]=dep[fa]+1,f[u]=u;\n    for(int i=head[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;if(v==fa) continue;\n        dfs(v,u);f[v]=u;\n    }\n    for(int i=head_quest[u];i!=-1;i=g[i].nxt){\n        int it=g[i].to;int v=(q[it].l==u?q[it].r:q[it].l);\n        if(f[v]&amp;&amp;!q[it].tag){\n            int lca=find(v);\n        }\n    }\n}\n</code></pre> <p>\u6811\u5256\u6c42lca</p> <p>\u6700\u666e\u901a\u7684\u6811\u5256\uff08\u8131\u53bb\u4e86\u6240\u6709\u7684\u5916\u58f3$O(n\\log n)$\uff09</p> <pre><code>int siz[N],top[N],dep[N],son[N],pa[N];\nvoid dfs(int u,int fa){\n    siz[u]=1,dep[u]=dep[fa]+1,pa[u]=fa;\n    for(re int i=head[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;if(v==fa) continue;\n        dfs(v,u);siz[u]+=siz[v];\n        if(siz[v]&gt;siz[son[u]]) son[u]=v;\n    }\n}\nvoid dfs2(int u,int fa,int topf){\n    top[u]=topf;\n    if(son[u]) dfs2(son[u],u,topf);\n    for(re int i=head[u];i!=-1;i=g[i].nxt){\n        int v=g[i].to;if(v==fa||v==son[u]) continue;\n        dfs2(v,u,v);\n    }\n    return ;\n}\nint lca(int x,int y){\n    while(top[x]!=top[y]){\n        if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);\n        x=pa[top[x]];\n    }\n    if(dep[x]&gt;dep[y]) swap(x,y);\n    return x;\n}\n</code></pre> <p>dfn\u5e8f\u6c42lca</p> <p>\u5495\u5495\u5495\u3002\uff08\u4e86\u89e3\uff0c\u4f46\u662f\u57fa\u672c\u6ca1\u6572\u8fc7\uff0c\u4e0d\u5e38\u7528\uff09</p>"}]}